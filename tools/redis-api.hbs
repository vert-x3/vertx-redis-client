/*
 * Copyright 2022 Red Hat, Inc.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Apache License v2.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * The Apache License v2.0 is available at
 * http://www.opensource.org/licenses/apache2.0.php
 *
 * You may elect to redistribute this code under either of these licenses.
 */
package io.vertx.redis.client;

import io.vertx.codegen.annotations.GenIgnore;
import io.vertx.codegen.annotations.Nullable;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.Future;
import io.vertx.redis.client.impl.RedisStackImpl;

import static io.vertx.codegen.annotations.GenIgnore.PERMITTED_TYPE;
import static io.vertx.redis.client.Request.cmd;

/**
 * <b>Auto generated</b> Redis Stack API client wrapper.
 * @version {{ version }}
 */
@VertxGen
public interface RedisStack {

  @GenIgnore(PERMITTED_TYPE)
  static RedisStack api(Redis client) {
    return new RedisStackImpl(client);
  }

  @GenIgnore(PERMITTED_TYPE)
  static RedisStack api(RedisConnection connection) {
    return new RedisStackImpl(connection);
  }

  Future<Void> close();
{{#each .}}

  /**
   * Redis command <a href="https://redis.io/commands/{{ name }}">{{ name }}</a>.
   * @return Future asynchronous result with {@link Response} or {@code null}.
   */
  @GenIgnore(GenIgnore.PERMITTED_TYPE)
  default Future<@Nullable Response> {{ camelcase safename }}({{{ types }}}) {
    return send(cmd(Command.{{ enum }}{{#if argLen}}, {{{ args }}}{{#if variable}}{{/if}}{{/if}}));
  }
{{/each}}

  /**
   * @param req the request to fulfill
   * @return Future response.
   */
  @GenIgnore
  Future<@Nullable Response> send(Request req);
}
